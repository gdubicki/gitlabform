projects_and_groups:

  # (TODO: migrate this whole file into the new docs "reference" per config section...)

  # settings for ALL projects in 'my-group' group
  "my-group/*":

    # key names here are hook URLs and values are as parameters described at
    # https://docs.gitlab.com/ee/api/projects.html#edit-project-hook
    # except where hooks are deleted with `delete: true`
    hooks:
      "http://host.domain.com/some-old-hook-you-want-to-remove-from-config":
        delete: true
      "http://127.0.0.1:5000/hooks/merge-request":
        push_events: false # this is set to true by GitLab API by default
        merge_requests_events: true
        token: some_secret_auth_token

    # key names here are just labels,
    # values are as parameters described at
    # https://docs.gitlab.com/ee/api/group_badges.html#add-a-badge-to-a-group
    # and https://docs.gitlab.com/ee/api/group_badges.html#placeholder-tokens
    # except where badges are deleted with `delete: true`
    # and that we REQUIRE to define the "name" (to identify each badge)
    group_badges:
      group-pipeline-status:
        name: "Group Badge"
        link_url: "https://gitlab.yourcompany.com/%{project_path}/-/commits/%{default_branch}"
        image_url: "https://gitlab.yourcompany.com/%{project_path}/badges/%{default_branch}/pipeline.svg"


  group-with-spammy-projects/*:
    # configures settings for the 'group-with-spammy-projects' group
    group_settings:
      # keys and values here are as described at https://docs.gitlab.com/ee/api/groups.html#update-group
      emails_disabled: true

  # settings specific to 'my-group/my-project1' project
  "my-group/my-project1":
    hooks:
      skip: true # this will skip whole hooks config *section* for this project, although it is set on group level

    # this is for adding/changing/deleting pipeline schedules
    #
    # keys names are schedule descriptions and values are parameters described at
    # https://docs.gitlab.com/ee/api/pipeline_schedules.html
    #
    # note: if there multiple pipeline schedules with the same description in GitLab project, corresponding entry
    # will cause those schedules to be DELETED and replaced with the one from the configuration
    # if there is exactly one schedule with the corresponding description, only parameters provided in the configuration
    # will be updated
    #
    # timezone defaults to 'UTC', valid values must be supported by ActiveSupport::TimeZone and can be taken e.g.
    # from https://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html
    schedules:
      "Some schedule":
        ref: main
        cron: "0 * * * MON-FRI"
        cron_timezone: "London"
        active: false
      "Another schedule":
        ref: develop
        cron: "0 * * * *"
        variables:
          some_variable:
            value: some_value
            variable_type: file # optional parameter, defaults to 'env_var'
          other_variable:
            value: another_value
      # this one will be deleted if exists
      "Obsolete schedule":
        delete: true

    # key names here are just labels,
    # values are as parameters described at
    # https://docs.gitlab.com/ee/api/project_badges.html#add-a-badge-to-a-project
    # and https://docs.gitlab.com/ee/api/project_badges.html#placeholder-tokens
    # except where badges are deleted with `delete: true`
    # and that we REQUIRE to define the "name" (to identify each badge)
    badges:
      old-badge-to-delete:
        name: "a-badge"
        delete: true
